name: Tests-Swarm

on:
  workflow_dispatch:

env:
  API_IMAGE: johnliutw/blog-api:${{ github.sha }}
  SCHEDULER_IMAGE: johnliutw/blog-scheduler:${{ github.sha }}
  WORKER_IMAGE: johnliutw/blog-worker:${{ github.sha }}
  NGINX_IMAGE: johnliutw/blog-nginx:${{ github.sha }}

jobs:
  build-backend-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build images
        run: |
          docker build -t $API_IMAGE --target=api --build-arg user=john --build-arg uid=1000 -f ./api/swarm.Dockerfile .
          docker build -t $SCHEDULER_IMAGE --target=scheduler --build-arg user=john --build-arg uid=1000 -f ./api/swarm.Dockerfile .
          docker build -t $WORKER_IMAGE --target=worker --build-arg user=john --build-arg uid=1000 -f ./api/swarm.Dockerfile .
      - name: Push images
        run: |
          docker push $API_IMAGE
          docker push $SCHEDULER_IMAGE
          docker push $WORKER_IMAGE

  build-nginx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build nginx image
        run: |
          docker build -t $NGINX_IMAGE -f ./Dockerfile.nginx .
          docker push $NGINX_IMAGE

  test:
    needs: [ build-backend-images ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull API image
        run: docker pull $API_IMAGE
      - name: Run tests
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          docker-compose -f docker-compose.ci.yml exec -T api sh -c "php artisan migrate:status && php artisan test"

  remove-images:
    needs: [ test ]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: actions/checkout@v4

      - name: Set executable permissions
        run: chmod +x ./deployment/docker/remove-image.sh

      - name: Remove images
        run: |
          ./deployment/docker/remove-image.sh johnliutw/blog-api ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/docker/remove-image.sh johnliutw/blog-worker ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/docker/remove-image.sh johnliutw/blog-scheduler ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/docker/remove-image.sh johnliutw/blog-nginx ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}

